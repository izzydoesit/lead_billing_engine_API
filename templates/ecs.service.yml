AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: 'infra'
    Description: The name of the parent Fargate networking stack that you created. Necessary to locate and reference resources created by that stack.

  ServiceName:
    Type: String
    Default: nginx
    Description: The name of the service to be deployed.
  ImageUrl: 
    Type: String
    Default: nginx:latest
    Description: The URL of the Docker image that contains the application process that will handle the traffic for this service.

  ContainerPort:
    Type: Number
    Default: 80
    Description: The port number the application inside the docker container is binding to
  HostPort:
    Type: Number
    Default: 80
    Description: The port number the application on the host is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: The amount of CPU to allocate to the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: The amount of memory in megabytes to allocate to the container.
  Path:
    Type: String
    Default: '*'
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: The number of copies of this service task to run
  
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc
  
  Conditions:
    HasCustomRole: 
      Fn::Not: [ Fn::Equals: [Fn::Ref: 'Role', ''] ]

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 
        Fn::Ref: 'ServiceName'
      Cpu: 
        Fn::Ref: 'ContainerCpu'
      Memory: 
        Fn::Ref: 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: 
        Fn::ImportValue:
          Fn::Join: [':', [Fn::Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - HasCustomRole
          - Fn::Ref: Role
          - Fn::Ref: AWS::NoValue
      ContainerDefinitions:
        - Name: 
            Fn::Ref 'ServiceName'
          Cpu: 
            Fn::Ref: 'ContainerCpu'
          Memory: 
            Fn::Ref: 'ContainerMemory'
          Image: 
            Fn::Ref: 'ImageUrl'
          PortMappings:
            - ContainerPort: 
                Fn::Ref: 'ContainerPort'
              HostPort: 
                Fn::Ref: 'HostPort'
              # Protocol: tcp
          # Essential: true
          # Environment:
          #   - Name: AWS_REGION
          #     Value: 
          #       Fn::Ref: AWS::Region
          #   - Name: AWS_STACK_NAME
          #     Value: 
          #       Fn::Ref: StackName
          #   - Name: AWS_SERVICE_NAME
          #     Value: 
          #       Fn::Ref: ServiceName
          #   - Name: AWS_CONTAINER_NAME
          #     Value: 
          #       Fn::Sub: '${StackName}-${ServiceName}'
          # IAM role to give the container access to other AWS resources
          # Only add this if the user has specified a role
          # This is a condition
          # Condition: HasCustomRole
          # TaskRoleArn: 
          #   Fn::Ref: Role

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: 
        Fn:Ref: 'ServiceName'
      Cluster:
        Fn::ImportValue:
          Fn::Join: [':', [Fn:Ref: 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 
        Fn:Ref: 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                Fn::Join: [':', [Fn:Ref: 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                Fn::Join: [':', [Fn:Ref: 'StackName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                Fn::Join: [':', [Fn:Ref: 'StackName', 'PublicSubnetTwo']]
      TaskDefinition: 
        Fn:Ref: 'TaskDefinition'
      LoadBalancers:
        - ContainerName: 
          Fn:Ref: 'ServiceName'
          ContainerPort: 
            Fn:Ref: 'ContainerPort'
          TargetGroupArn: 
            Fn:Ref: 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: 
        Fn:Ref: 'ServiceName'
      Port: 
        Fn:Ref: 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          Fn::Join: [':', [Fn:Ref: 'StackName', 'VPCId']]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: 
          Fn:Ref: 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [Fn:Ref: 'Path']
      ListenerArn:
        Fn::ImportValue:
          Fn::Join: [':', [Fn:Ref: 'StackName', 'PublicListener']]
      Priority: 
        Fn:Ref: 'Priority'