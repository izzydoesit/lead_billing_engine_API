AWSTemplateFormatVersion: "2010-09-09"
Description: A stack for deploying containerized applications in AWS Fargate.
  This stack runs containers in a public VPC subnet, and includes a public
  facing load balancer to register the services.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicOne:
      CIDR: "10.0.3.0/24"
    PublicTwo:
      CIDR: "10.0.4.0/24"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${AWS::StackName}-vpc"

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: "VPC"
        CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PublicOne
          - CIDR
      AvailabilityZone:
        Fn::Select: [0, Fn::GetAZs: ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-public-subnet-one"
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::Ref: "VPC"
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PublicTwo, CIDR]
      AvailabilityZone:
        Fn::Select: [1, Fn::GetAZs: ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${AWS::StackName}-public-subnet-two"
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::Ref: "VPC"
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PrivateOne, CIDR]
      AvailabilityZone:
        Fn::Select: [0, Fn::GetAZs: ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-private-subnet-one"
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::Ref: "VPC"
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PrivateTwo, CIDR]
      AvailabilityZone:
        Fn::Select: [1, Fn::GetAZs: ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-private-subnet-two"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-internet-gateway"
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Fn::Ref: "VPC"
      InternetGatewayId:
        Fn::Ref: "InternetGateway"
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt: [EIP, AllocationId]
      SubnetId:
        Fn::Ref: "PublicSubnetOne"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-nat-gateway"
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-nat-eip"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::Ref: "VPC"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-public-route-table"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId:
        Fn::Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Fn::Ref: "InternetGateway"
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Fn::Ref: "PublicSubnetOne"
      RouteTableId:
        Fn::Ref: "PublicRouteTable"
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Fn::Ref: "PublicSubnetTwo"
      RouteTableId:
        Fn::Ref: "PublicRouteTable"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::Ref: "VPC"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-private-route-table"
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Fn::Ref: "PrivateRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Fn::Ref: "NatGateway"
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Fn::Ref: "PrivateSubnetOne"
      RouteTableId:
        Fn::Ref: "PrivateRouteTable"
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Fn::Ref: "PrivateSubnetTwo"
      RouteTableId:
        Fn::Ref: "PrivateRouteTable"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: "${AWS::StackName}-ecs-cluster"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-ecs-cluster"

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId:
        Fn::Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Fn::Sub: "${PublicOneCIDR}/32"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Fn::Sub: "${PublicTwoCIDR}/32"

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public load balancer
      GroupId:
        Fn::Ref: "FargateContainerSecurityGroup"
      SourceSecurityGroupId:
        Fn::Ref: "PublicLoadBalancerSG"
      IpProtocol: -1

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId:
        Fn::Ref: "FargateContainerSecurityGroup"
      SourceSecurityGroupId:
        Fn::Ref: "FargateContainerSecurityGroup"
      IpProtocol: -1

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::Ref: "VPC"
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp:
            Fn::Sub: "0.0.0.0/0"
          IpProtocol: -1
          FromPort: 9000
          ToPort: 9010

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - Fn::Ref: "PublicSubnetOne"
        - Fn::Ref: "PublicSubnetTwo"
      SecurityGroups:
        - Fn::Ref: "FargateContainerSecurityGroup"
      Name:
        Fn::Sub: "${AWS::StackName}-public-load-balancer"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-public-load-balancer"

  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::Ref: "VPC"
      Name:
        Fn::Join: ["-", [Fn::Ref: "AWS::StackName", "drop-1"]]
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthCheckHealthyThresholdCount: 2
      HealthCheckUnhealthyThresholdCount: 2
      TargetType: ip
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-dummy-public-target-group"
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Fn::Ref: "DummyTargetGroupPublic"
          Type: "forward"
      LoadBalancerArn:
        Fn::Ref: "PublicLoadBalancer"
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-public-load-balancer-listener"

    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs.amazonaws.com]
              Action: [sts:AssumeRole]
        Path: /
        Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "ec2:AttachNetworkInterface"
                    - "ec2:CreateNetworkInterface"
                    - "ec2:CreateNetworkInterfacePermission"
                    - "ec2:DeleteNetworkInterface"
                    - "ec2:DeleteNetworkInterfacePermission"
                    - "ec2:Describe*"
                    - "ec2:DetachNetworkInterface"
                    - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                    - "elasticloadbalancing:DeregisterTargets"
                    - "elasticloadbalancing:Describe*"
                    - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                    - "elasticloadbalancing:RegisterTargets"
                  Resource: "*"

    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs-tasks.amazonaws.com]
              Action: [sts:AssumeRole]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

Outputs:
  ClusterName:
    Description: Name of the ECS Cluster
    Value:
      Fn::Ref: ECSCluster
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ClusterName"]]
  ExternalUrl:
    Description: The URL of the public load balancer
    Value:
      Fn::Join: ["", ["http://", Fn::GetAtt: "PublicLoadBalancer.DNSName"]]
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ExternalUrl"]]
  ECSRole:
    Description: The ARN of the ECS Role
    Value:
      Fn::GetAtt: "ECSRole.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ECSRole"]]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS Task Execution Role
    Value:
      Fn::GetAtt: "ECSTaskExecutionRole.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ECSTaskExecutionRole"]]
  PublicListener:
    Description: The ARN of the Public Load Balancer Listener
    Value:
      Fn::GetAtt: "PublicLoadBalancerListener.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PublicListener"]]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value:
      Fn::Ref: VPC
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "VPCId"]]
  PublicSubnetOne:
    Description: The ID of the first public subnet
    Value:
      Fn::Ref: PublicSubnetOne
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PublicSubnetOne"]]
  PublicSubnetTwo:
    Description: The ID of the second public subnet
    Value:
      Fn::Ref: PublicSubnetTwo
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PublicSubnetTwo"]]
  PrivateSubnetOne:
    Description: The ID of the first private subnet
    Value:
      Fn::Ref: PrivateSubnetOne
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PrivateSubnetOne"]]
  PrivateSubnetTwo:
    Description: The ID of the second private subnet
    Value:
      Fn::Ref: PrivateSubnetTwo
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PrivateSubnetTwo"]]
  NatGateway:
    Description: The ID of the NAT Gateway
    Value:
      Fn::Ref: NatGateway
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "NatGateway"]]
  NatEIP:
    Description: The ID of the NAT EIP
    Value:
      Fn::Ref: EIP
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "NatEIP"]]
  PublicLoadBalancer:
    Description: The ARN of the Public Load Balancer
    Value:
      Fn::GetAtt: "PublicLoadBalancer.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PublicLoadBalancer"]]
  PublicLoadBalancerSG:
    Description: The Group ID of the Public Load Balancer Security Group
    Value:
      Fn::GetAtt: "PublicLoadBalancerSG.GroupId"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "PublicLoadBalancerSG"]]
  FargateContainerSecurityGroup:
    Description: The Group ID of the Fargate Container Security Group
    Value:
      Fn::GetAtt: "FargateContainerSecurityGroup.GroupId"
    Export:
      Name:
        Fn::Join:
          [":", [Fn::Ref: "AWS::StackName", "FargateContainerSecurityGroup"]]
  ECSCluster:
    Description: The ARN of the ECS Cluster
    Value:
      Fn::GetAtt: "ECSCluster.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ECSCluster"]]
  ECSServiceRole:
    Description: The ARN of the ECS Service Role
    Value:
      Fn::GetAtt: "ECSServiceRole.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ECSServiceRole"]]
  ECSServiceRolePolicy:
    Description: The ARN of the ECS Service Role Policy
    Value:
      Fn::GetAtt: "ECSServiceRolePolicy.Arn"
    Export:
      Name:
        Fn::Join: [":", [Fn::Ref: "AWS::StackName", "ECSServiceRolePolicy"]]
