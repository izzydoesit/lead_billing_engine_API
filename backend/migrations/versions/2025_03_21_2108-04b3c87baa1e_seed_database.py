"""Seed database

Revision ID: 04b3c87baa1e
Revises: cfbd30e0b841
Create Date: 2025-03-21 21:08:49.814600

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import Session
from sqlalchemy.ext.asyncio import AsyncSession
from app.models import Customer, Product, Lead, Action
from faker import Faker
import random
import logging
from app.shared import LeadTypes, ActionTypes, EngagementLevelTypes

logger = logging.getLogger(__name__)

revision = "04b3c87baa1e"
down_revision = "cfbd30e0b841"
branch_labels = None
depends_on = None


# Enums
leadtypes_enum = postgresql.ENUM(
    "WEBSITE_VISIT",
    "SOCIAL_MEDIA",
    "EMAIL_CAMPAIGN",
    "REFERRAL",
    "EVENT",
    "WEBINAR",
    "DEMO_REQUEST",
    "TRADE_SHOW",
    "CONFERENCE",
    "NEWSLETTER",
    "FEEDBACK",
    name="leadtypes",
)

actiontypes_enum = postgresql.ENUM(
    "VISIT",
    "DOWNLOAD",
    "FORM_SUBMIT",
    "PURCHASE",
    "LIKE",
    "FOLLOW",
    "SHARE",
    "COMMENT",
    "REPOST",
    "OPEN",
    "CLICK",
    "UNSUBSCRIBE",
    "SIGNUP",
    "REGISTER",
    "ATTEND",
    "FOLLOW_UP",
    "ATTENDANCE",
    "SUBMISSION",
    name="actiontypes",
)

engagementleveltypes_enum = postgresql.ENUM(
    "LOW", "MEDIUM", "HIGH", name="engagementleveltypes"
)


def check_version(connection):
    # Example check, customize as needed
    result = connection.execute(
        text("SELECT version_num FROM alembic_version")
    ).fetchone()
    if result:
        current_version = result[0]
        logger.info(f"Current DB version: {current_version}")
        if current_version != "cfbd30e0b841":
            raise Exception(
                f"Expected version cfbd30e0b841 but found {current_version}"
            )
    else:
        logger.info("No version found in alembic_version table.")


def upgrade():
    connection = op.get_bind()
    logger.info("Applying seeding database migration to abb97a063c02")
    session = Session(bind=connection)

    fake = Faker()

    try:
        logger.info("~~**~~ Creating enums...")
        # Create enums
        leadtypes_enum.create(op.get_bind())
        actiontypes_enum.create(op.get_bind())
        engagementleveltypes_enum.create(op.get_bind())
        logger.info("~~**~~ Enums created successfully")
        logger.info("~~**~~ Seeding database...")

        # Seed Customers and Products
        customers = []
        products = []
        for _ in range(10):
            customer = Customer(id=fake.uuid4(), name=fake.name(), email=fake.email())
            session.add(customer)
            customers.append(customer)

            product = Product(
                id=fake.uuid4(), name=fake.word(), description=fake.text()
            )
            session.add(product)
            products.append(product)

        session.commit()
        logger.info("~~**~~ Customers and Products seeded successfully")

        # Seed Leads and Actions
        for customer in customers:
            for product in products:
                lead = Lead(
                    id=fake.uuid4(),
                    customer_id=customer.id,
                    product_id=product.id,
                    lead_type=fake.random_element(list(LeadTypes)).name,
                    created_at=fake.date_time_this_decade(),
                )
                session.add(lead)
                session.commit()

                for _ in range(3):
                    action = Action(
                        id=fake.uuid4(),
                        lead_id=lead.id,
                        customer_id=customer.id,
                        product_id=product.id,
                        lead_type=lead.lead_type,
                        action_type=fake.random_element(list(ActionTypes)).name,
                        engagement_level=fake.random_element(
                            list(EngagementLevelTypes)
                        ).name,
                        created_at=fake.date_time_this_decade(),
                    )
                    lead.actions.append(action)
                    customer.actions.append(action)
                    product.actions.append(action)
                    session.add(action)
                    session.commit()

        logger.info("~~**~~ Leads and Actions seeded successfully")
        logger.info("Successfully applied seeding database migration to abb97a063c02")
    except Exception as e:
        logger.error(
            f"Failed to apply seeding database migration to abb97a063c02: {str(e)}"
        )
        session.rollback()
        raise e
    finally:
        session.close()


def downgrade():
    connection = op.get_bind()
    logger.info("Reverting upgrade to 04b3c87baa1e")
    try:
        # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
        logger.info("Successfully reverted upgrade to 04b3c87baa1e")
    except Exception as e:
        logger.error(f"Failed to revert upgrade to 04b3c87baa1e: {e}")
        raise e
