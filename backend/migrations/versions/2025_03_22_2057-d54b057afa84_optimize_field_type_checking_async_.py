"""Optimize field type checking & async loading

Revision ID: d54b057afa84
Revises: 04b3c87baa1e
Create Date: 2025-03-22 20:57:10.007117

"""

from alembic import op
import sqlalchemy as sa


import logging
from sqlalchemy import text

logger = logging.getLogger(__name__)

revision = 'd54b057afa84'
down_revision = '04b3c87baa1e'
branch_labels = None
depends_on = None

def check_version(connection):
    # Example check, customize as needed
    result = connection.execute(text("SELECT version_num FROM alembic_version")).fetchone()
    if result:
        current_version = result[0]
        logger.info(f"Current DB version: {current_version}")
        if current_version != "04b3c87baa1e":
            raise Exception(f"Expected version 04b3c87baa1e but found {current_version}")
    else:
        logger.info("No version found in alembic_version table.")

def upgrade():
    connection = op.get_bind()
    logger.info("Applying upgrade to d54b057afa84")
    try:
        check_version(connection)
            # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
        logger.info("Successfully applied upgrade to d54b057afa84")
    except Exception as e:
        logger.error(f"Failed to apply upgrade to d54b057afa84: {e}")
        raise e

def downgrade():
    connection = op.get_bind()
    logger.info("Reverting upgrade to d54b057afa84")
    try:
            # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
        logger.info("Successfully reverted upgrade to d54b057afa84")
    except Exception as e:
        logger.error(f"Failed to revert upgrade to d54b057afa84: {e}")
        raise e
