"""Update FK relationships & field constraints

Revision ID: bfd038240278
Revises: 76d6c918b23a
Create Date: 2025-03-18 23:14:03.775491

"""

from alembic import op
import sqlalchemy as sa


import logging
from sqlalchemy import text

logger = logging.getLogger(__name__)

revision = "bfd038240278"
down_revision = "76d6c918b23a"
branch_labels = None
depends_on = None


def check_version(connection):
    # Example check, customize as needed
    result = connection.execute(
        text("SELECT version_num FROM alembic_version")
    ).fetchone()
    if result:
        current_version = result[0]
        logger.info(f"Current DB version: {current_version}")
        if current_version != "76d6c918b23a":
            raise Exception(
                f"Expected version 76d6c918b23a but found {current_version}"
            )
    else:
        logger.info("No version found in alembic_version table.")


def upgrade():

    connection = op.get_bind()
    logger.info("Applying upgrade to bfd038240278")
    try:
        check_version(connection)
        # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
        logger.info("Successfully applied upgrade to bfd038240278")
    except Exception as e:
        logger.error(f"Failed to apply upgrade to bfd038240278: {e}")
        raise e


def downgrade():
    connection = op.get_bind()
    logger.info("Reverting upgrade to bfd038240278")
    try:
        # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
        logger.info("Successfully reverted upgrade to bfd038240278")
    except Exception as e:
        logger.error(f"Failed to revert upgrade to bfd038240278: {e}")
        raise e
