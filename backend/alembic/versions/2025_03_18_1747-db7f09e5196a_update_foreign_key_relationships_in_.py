"""Update foreign key & relationships in Models

Revision ID: db7f09e5196a
Revises: 76d6c918b23a
Create Date: 2025-03-18 17:47:15.307899

"""

from alembic import op
import sqlalchemy as sa

import logging
from sqlalchemy import text, Integer, String

logger = logging.getLogger(__name__)

revision = "db7f09e5196a"
down_revision = "76d6c918b23a"
branch_labels = None
depends_on = None


def check_version(connection):
    # Example check, customize as needed
    result = connection.execute(
        text("SELECT version_num FROM alembic_version")
    ).fetchone()
    if result:
        current_version = result[0]
        logger.info(f"Current DB version: {current_version}")
        if current_version != "76d6c918b23a":
            raise Exception(
                f"Expected version 76d6c918b23a but found {current_version}"
            )
    else:
        logger.info("No version found in alembic_version table.")


def upgrade():
    connection = op.get_bind()
    logger.info("Applying upgrade to db7f09e5196a")
    try:
        check_version(connection)
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column(
            "actions",
            "lead_id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.alter_column(
            "actions",
            "customer_id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.alter_column(
            "actions",
            "product_id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.drop_index("ix_actions_billing_report_id", table_name="actions")
        op.drop_constraint(
            "actions_billing_report_id_fkey", "actions", type_="foreignkey"
        )
        op.drop_column("actions", "billing_report_id")
        op.alter_column(
            "billing_reports",
            "customer_id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.alter_column(
            "billing_reports",
            "customer_name",
            existing_type=sa.VARCHAR(length=50),
            type_=sa.String(length=30),
            existing_nullable=False,
        )
        op.create_index(
            op.f("ix_billing_reports_customer_name"),
            "billing_reports",
            ["customer_name"],
            unique=False,
        )
        op.create_foreign_key(
            None, "billing_reports", "customers", ["customer_name"], ["name"]
        )
        op.create_foreign_key(
            None, "billing_reports", "customers", ["customer_email"], ["email"]
        )
        op.alter_column(
            "customers",
            "id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
            existing_server_default=sa.text("nextval('customers_id_seq'::regclass)"),
        )
        op.alter_column(
            "leads",
            "id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.alter_column(
            "leads",
            "customer_id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.alter_column(
            "leads",
            "product_id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        op.alter_column(
            "products",
            "id",
            existing_type=sa.INTEGER(),
            type_=sa.String(),
            existing_nullable=False,
        )
        # ### end Alembic commands ###
        logger.info("Successfully applied upgrade to db7f09e5196a")
    except Exception as e:
        logger.error(f"Failed to apply upgrade to db7f09e5196a: {e}")
        raise e


def downgrade():
    connection = op.get_bind()
    logger.info("Reverting upgrade to db7f09e5196a")
    try:
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column(
            "products",
            "id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.alter_column(
            "leads",
            "product_id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.alter_column(
            "leads",
            "customer_id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.alter_column(
            "leads",
            "id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.alter_column(
            "customers",
            "id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
            existing_server_default=sa.text("nextval('customers_id_seq'::regclass)"),
        )
        op.drop_constraint(None, "billing_reports", type_="foreignkey")
        op.drop_constraint(None, "billing_reports", type_="foreignkey")
        op.drop_index(
            op.f("ix_billing_reports_customer_name"), table_name="billing_reports"
        )
        op.alter_column(
            "billing_reports",
            "customer_name",
            existing_type=sa.String(length=30),
            type_=sa.VARCHAR(length=50),
            existing_nullable=False,
        )
        op.alter_column(
            "billing_reports",
            "customer_id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.add_column(
            "actions",
            sa.Column(
                "billing_report_id", sa.INTEGER(), autoincrement=False, nullable=False
            ),
        )
        op.create_foreign_key(
            "actions_billing_report_id_fkey",
            "actions",
            "billing_reports",
            ["billing_report_id"],
            ["id"],
        )
        op.create_index(
            "ix_actions_billing_report_id",
            "actions",
            ["billing_report_id"],
            unique=False,
        )
        op.alter_column(
            "actions",
            "product_id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.alter_column(
            "actions",
            "customer_id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        op.alter_column(
            "actions",
            "lead_id",
            existing_type=sa.String(),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        # ### end Alembic commands ###
        logger.info("Successfully reverted upgrade to db7f09e5196a")
    except Exception as e:
        logger.error(f"Failed to revert upgrade to db7f09e5196a: {e}")
        raise e
