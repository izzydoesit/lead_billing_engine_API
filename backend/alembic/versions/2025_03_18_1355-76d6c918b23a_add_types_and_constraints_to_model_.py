"""Add types and constraints to model fields


Revision ID: 76d6c918b23a
Revises: 8f665d50961b
Create Date: 2025-03-18 13:55:51.994222

"""

from alembic import op
import sqlalchemy as sa


import logging
from sqlalchemy import text

logger = logging.getLogger(__name__)

revision = '76d6c918b23a'
down_revision = '8f665d50961b'
branch_labels = None
depends_on = None

def check_version(connection):
    # Example check, customize as needed
    result = connection.execute(text("SELECT version_num FROM alembic_version")).fetchone()
    if result:
        current_version = result[0]
        logger.info(f"Current DB version: {current_version}")
        if current_version != "8f665d50961b":
            raise Exception(f"Expected version 8f665d50961b but found {current_version}")
    else:
        logger.info("No version found in alembic_version table.")

def upgrade():
    connection = op.get_bind()
    logger.info("Applying upgrade to 76d6c918b23a")
    try:
        check_version(connection)
            # ### commands auto generated by Alembic - please adjust! ###
        op.add_column('actions', sa.Column('timestamp', sa.DateTime(), nullable=False))
        op.alter_column('billing_reports', 'total_amount',
                   existing_type=sa.DOUBLE_PRECISION(precision=53),
                   nullable=False)
        op.add_column('customers', sa.Column('created_at', sa.DateTime(), nullable=False))
        op.create_unique_constraint(None, 'customers', ['name'])
        op.add_column('leads', sa.Column('created_at', sa.DateTime(), nullable=False))
        op.create_index(op.f('ix_leads_product_id'), 'leads', ['product_id'], unique=False)
        op.add_column('products', sa.Column('created_at', sa.DateTime(), nullable=False))
        op.alter_column('products', 'description',
                   existing_type=sa.VARCHAR(length=50),
                   nullable=True)
        # ### end Alembic commands ###
        logger.info("Successfully applied upgrade to 76d6c918b23a")
    except Exception as e:
        logger.error(f"Failed to apply upgrade to 76d6c918b23a: {e}")
        raise e

def downgrade():
    connection = op.get_bind()
    logger.info("Reverting upgrade to 76d6c918b23a")
    try:
            # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column('products', 'description',
                   existing_type=sa.VARCHAR(length=50),
                   nullable=False)
        op.drop_column('products', 'created_at')
        op.drop_index(op.f('ix_leads_product_id'), table_name='leads')
        op.drop_column('leads', 'created_at')
        op.drop_constraint(None, 'customers', type_='unique')
        op.drop_column('customers', 'created_at')
        op.alter_column('billing_reports', 'total_amount',
                   existing_type=sa.DOUBLE_PRECISION(precision=53),
                   nullable=True)
        op.drop_column('actions', 'timestamp')
        # ### end Alembic commands ###
        logger.info("Successfully reverted upgrade to 76d6c918b23a")
    except Exception as e:
        logger.error(f"Failed to revert upgrade to 76d6c918b23a: {e}")
        raise e
